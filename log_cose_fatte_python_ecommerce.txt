conda create --name python_ecommerce_venv


conda activate python_ecommerce_venv


python manage.py collectstatic
è il comando che uso per muovere gli static fies


se ho
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_cdn")

e faccio in

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_cdn", "static_root")

ottengo che 
python manage.py collectstatic
copia gli statics in 
132 static files copied to 'C:\Users\Tommaso\Django rest framework\Udemy Django\static_cdn\static_root'.
compone l cartelle una dentro l'altra come dettato dalle virgole

questo da l'idea del media root



-------


due view possono puntare allo steso template

class ProductListView(ListView):
    queryset = Product.objects.all()
    template_name = "products/list.html"


def product_list_view(request):
    queryset = Product.objects.all()
    context = {
        'qs': queryset
    }
    return render(request, "products/list.html", context)


    ---

    insomma queste sono equivalenti, fbv vs cbv

    class ProductListView(ListView):
    queryset = Product.objects.all()
    template_name = "products/list.html"

    # def get_context_data(self, *args, **kwargs):
    #     context = super(ProductListView, self).get_context_data(*args, **kwargs)
    #     print(context)
    #     return context



def product_list_view(request):
    queryset = Product.objects.all()
    context = {
        'object_list': queryset
    }
    return render(request, "products/list.html", context)


python manage.py shell


    path('products/<str:slug>', ProductDetailSlugView.as_view()),


at4enzione activate
Product.objects.get
vs
Product.object.get


------------

I Signal sa mi servono per fare in modo che quando cambio gli oggetti contenuti nel carrello dal django-admin di quel Model carrello e il prezzo viene adeguato di conseguenza


i segnali vengono mandati quando succedono cose particolari al modello. eg salvataggio


-------------------


così funziona
<a class="nav-link" href="{% url 'logout' %}">Logout</a>

così no, anche se il tag è registrato
<a class="nav-link" href="{% 'logout_url' %}">Logout</a>



---------------------

se c'è corrispondenza di template e variabile e view, ma la variabile non è mostrata nel template,
probabilmente è un problema di indentazione logica


-
-----------------


blocco a 9.41 di associate addresses to orderr


----------------


source venv/bin/activate


venv_r_path=$(find */bin/ -name "activate")
venv_r_path=$(find */bin/ -name "activate")


ho gestito il fatto che hanno rimosso la funzione is_ajax da request in questo modo:

https://stackoverflow.com/questions/70419441/attributeerror-wsgirequest-object-has-no-attribute-is-ajax


le ajax request sono per fare le cose in modod asicrono e in python le views devo intercettare il fatto che sono asincrone e non sincrone

 if request.is_ajax(): # asinchronous javascript and xml
        print("Ajax request")
        # se la richiesta è ajax, devo ritornare dati usando il formato ajax -> jsonresponse
        # quindi lo aggiungo usando jsonresoonse
        dict_for_jsonresponse = {
            "added": added,
            "removed": not added, # sto aggiungendo l'opposto,
            "cartItemCount": cart_obj.products.count()  # camelcase perche diventa la key di un json
        }
        
        json_response = JsonResponse(dict_for_jsonresponse)

        return json_response  # ok

    return redirect("cart:home")


jquery confirm per sistmare e gestireg li errore

la 113
sono arrivato al 7.23 del 


https://github.com/codingforentrepreneurs/eCommerce
https://github.com/codingforentrepreneurs/eCommerce/tree/master/src



115

voglio lanciare questo
python manage.py collectstatic

ogni volta che aggiungo un file quindi
static_my_proj/js/ecommerce.js
e lo linko qui
templates/base/js.html

129 static files copied to '/home/tommaso/tommaso01/coding_projects/static_cdn/static_root'.


e ricorrda che ho definito

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_cdn", "static_root")


-------------------------

lez 121

Email: tommaso91@dev.it
Password: password
Password (again): 
This password is too common.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.



python manage.py dumpdata --format json --indent 4 

python manage.py dumpdata products.Product --format json --indent 4 

# solo il modello rpoducts
gli altri sono collegati agli admin che elimio
python manage.py dumpdata products.Product --format json --indent 4  > products/fixtures/products.json

backupde prodotti
cambio il db

per svuotare il db basta he lo rinomino da db.squlite3 a db2.squlite3
perche quando lo ricrea ricrea l'altro e il 2 rimane ome backup

poi cancello le migrazioni in accounts


(venv) tommaso@tommaso-dev1:~/tommaso01/coding_projects/basic-django-ecommerce$ python manage.py makemigrations

Migrations for 'accounts':
  accounts/migrations/0001_initial.py
    - Create model User
    - Create model GuestEmail
    - Create model Profile

(venv) tommaso@tommaso-dev1:~/tommaso01/coding_projects/basic-django-ecommerce$ python manage.py mmigrate

Operations to perform:
  Apply all migrations: accounts, addresses, admin, auth, billing, carts, contenttypes, orders, products, sessions, tags
Running migrations:
  Applying accounts.0001_initial... OK
  Applying billing.0001_initial... OK
  Applying billing.0002_auto_20210131_1854... OK
  Applying billing.0003_auto_20210131_1855... OK
  Applying billing.0004_auto_20210131_1920... OK
  Applying addresses.0001_initial... OK
  Applying addresses.0002_auto_20210213_1646... OK
  Applying contenttypes.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0001_initial... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying products.0001_initial... OK
  Applying products.0002_auto_20210106_1217... OK
  Applying products.0003_product_image... OK
  Applying products.0004_auto_20210108_0115... OK
  Applying products.0005_auto_20210108_0123... OK
  Applying products.0006_auto_20210108_0125... OK
  Applying products.0007_auto_20210111_2318... OK
  Applying products.0008_product_active... OK
  Applying products.0009_product_slug... OK
  Applying products.0010_auto_20210116_2302... OK
  Applying products.0011_auto_20210116_2324... OK
  Applying products.0012_product_timestamp... OK
  Applying carts.0001_initial... OK
  Applying carts.0002_delete_cart... OK
  Applying carts.0003_cart... OK
  Applying carts.0004_auto_20210123_2325... OK
  Applying carts.0005_auto_20210123_2326... OK
  Applying carts.0006_cart_subtotal... OK
  Applying orders.0001_initial... OK
  Applying orders.0002_auto_20210129_1151... OK
  Applying orders.0003_auto_20210131_1201... OK
  Applying orders.0004_auto_20210131_1216... OK
  Applying orders.0005_order_billing_profile... OK
  Applying orders.0006_order_active... OK
  Applying orders.0007_auto_20210213_1646... OK
  Applying sessions.0001_initial... OK
  Applying tags.0001_initial... OK


python manage.py createsuperuser

  Email: tommaso91@dev.it
Password: 
Password (again): 
This password is too common.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.


 python manage.py loaddata products/fixtures/products.json
devo poi ricreare i superuser perche non avevano i metodi di permessi che sono richiesti per forza dalla doc di django
