conda create --name python_ecommerce_venv


conda activate python_ecommerce_venv


python manage.py collectstatic
Ã¨ il comando che uso per muovere gli static fies


se ho
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_cdn")

e faccio in

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_cdn", "static_root")

ottengo che 
python manage.py collectstatic
copia gli statics in 
132 static files copied to 'C:\Users\Tommaso\Django rest framework\Udemy Django\static_cdn\static_root'.
compone l cartelle una dentro l'altra come dettato dalle virgole

questo da l'idea del media root



-------


due view possono puntare allo steso template

class ProductListView(ListView):
    queryset = Product.objects.all()
    template_name = "products/list.html"


def product_list_view(request):
    queryset = Product.objects.all()
    context = {
        'qs': queryset
    }
    return render(request, "products/list.html", context)


    ---

    insomma queste sono equivalenti, fbv vs cbv

    class ProductListView(ListView):
    queryset = Product.objects.all()
    template_name = "products/list.html"

    # def get_context_data(self, *args, **kwargs):
    #     context = super(ProductListView, self).get_context_data(*args, **kwargs)
    #     print(context)
    #     return context



def product_list_view(request):
    queryset = Product.objects.all()
    context = {
        'object_list': queryset
    }
    return render(request, "products/list.html", context)


python manage.py shell


    path('products/<str:slug>', ProductDetailSlugView.as_view()),


at4enzione activate
Product.objects.get
vs
Product.object.get


------------

I Signal sa mi servono per fare in modo che quando cambio gli oggetti contenuti nel carrello dal django-admin di quel Model carrello e il prezzo viene adeguato di conseguenza


i segnali vengono mandati quando succedono cose particolari al modello. eg salvataggio